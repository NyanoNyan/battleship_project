{"version":3,"sources":["factory_functions/createValidMoves.js","components/DisplayBoard.js","factory_functions/ship.js","factory_functions/gameboard.js","factory_functions/player.js","App.js","index.js"],"names":["createValidMoves","charA","charZ","setUpMoves","a","i","charCodeAt","j","push","String","fromCharCode","genCharArray","map","arr","store","concat","CreateBoard","props","markCoord","compShips","validMoves","classColour","boardP","undefined","length","getPlaceLoc","includes","id","className","onClick","e","DisplayBoard","Ship","name","placedLoc","hits","getHits","hit","hitLoc","isSunk","uniqueValues","Set","v","filter","getName","getLength","setCoord","coordinates","GameBoard","ship","missedShots","shipsObjs","placeShips","location","newShip","receiveAttack","check","checkAllSunk","sunkArray","obj","every","showShips","showHits","Player","newValidMoves","playerMove","computerMove","randomPick","Math","floor","random","item","App","useState","setIsRestart","winner","setWinner","resetColours","compBoardEle","document","getElementById","childNodes","textContent","idx","gameBoardC","compMove","newPlayers","eleComp","querySelector","checkWinner","playerBoard","gameBoardP","setUpBoard","tt","console","log","target","winnerMsg","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d753620c.chunk.js","sourcesContent":["const createValidMoves = (charA, charZ) => {\n    function genCharArray(charA, charZ) {\n        var a = [],\n            i = charA.charCodeAt(0),\n            j = charZ.charCodeAt(0);\n        for (; i <= j; ++i) {\n            a.push(String.fromCharCode(i));\n        }\n        return a;\n    }\n    const validMoves = genCharArray(charA, charZ);\n    const setUpMoves = validMoves.map((arr) => {\n        let store = [];\n        for (let i = 1; i < 11; i++) {\n            store.push(arr + String(i));\n        }\n        return store;\n    });\n\n    return [].concat(...setUpMoves);\n};\n\nexport default createValidMoves;","import \"../styles/DisplayBoard.css\";\nimport createValidMoves from \"../factory_functions/createValidMoves\";\n\nconst DisplayBoard = (props) => {\n    const { markCoord, compShips } = props;\n    return (\n        <div>\n            <h3> Battleship Project</h3>\n            <div className=\"main-board\">\n                <div id=\"computer-board\">\n                    <p className=\"board-heading\">Computer Board</p>\n                    <div id= \"computer-board-squares\" className=\"board-types\"> \n                        <CreateBoard \n                            markCoord = {markCoord}\n                            compShips = {compShips}\n                        />\n                    </div>\n                </div>\n\n                <div id=\"player-board\">\n                    <p className=\"board-heading\">Player Board</p>\n                    <div id= \"player-board-squares\" className=\"board-types\">\n                        <CreateBoard \n                            markCoord = {markCoord}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    );\n};\n\nconst CreateBoard = (props) => {\n    const { markCoord, compShips } = props;\n    const validMoves = createValidMoves(\"A\", \"J\");\n    let classColour = \"square square-bg\";\n\n    let boardP = [];\n    for (let i = 0; i < 100; i++) {\n        if (compShips !== undefined) {\n            // Highlighting the computer ships placements\n            for (let j = 0; j < compShips.length; j++) {\n                if (compShips[j].getPlaceLoc().includes(validMoves[i])) {\n                    classColour = \"square comp-show-ship-bg\";\n                    break;\n                } else {\n                    classColour = \"square square-bg\";\n                }\n            };\n        };\n        \n        // Push the board details in boardP\n        boardP.push(\n        <button \n            key= {i} \n            id={validMoves[i]}\n            className={classColour}\n            onClick={(e) => markCoord(e)}>\n        </button>\n        );\n    };\n    return boardP;\n};\n\nexport default DisplayBoard;\n\n\n// Material UI Grid?\n// How to make a grid using react, not repeatable using dom to insert elements etc. Is there a library?\n\n// But each ID inside square.\n// How to implement DOM manipulation module.","const Ship = (name, placedLoc, length) => {\n    let hits = [];\n    const getName = () => name;\n    const getPlaceLoc = () => placedLoc;\n    const getLength = () => length;\n    const getHits = () => hits;\n\n    // takes a number and marks that position as a \"hit\"\n    const hit = (hitLoc) => {\n        hits.push(hitLoc);\n    };\n\n    const setCoord = (coordinates) => {\n        placedLoc = coordinates;\n    };\n\n    // Calculates based on it's length and whether all of the position\n    // of that particular shit have been hit.\n    const isSunk = () => {\n        // if hits == length then sunk\n\n        // Get unique items\n        const uniqueValues = new Set([...getHits(), ...getPlaceLoc()]);\n        if (getHits().length !== getPlaceLoc().length) {\n            return false;\n        }\n        // Loop over each unique values and compare it with each item in an array.\n        // If the lengths of both count are the same since, return true. Since we are checking\n        // if each unique items are in the two arrays first then checking if the len are the same.\n        for (const v of uniqueValues) {\n            const hitCount = getHits().filter((e) => e === v).length;\n            const locCount = getPlaceLoc().filter((e) => e === v).length;\n            if (hitCount !== locCount) {\n                return false;\n            }\n            return true;\n        }\n    };\n\n    return {\n        hit,\n        isSunk,\n        getName,\n        getPlaceLoc,\n        getLength,\n        getHits,\n        setCoord,\n    };\n};\n\nexport default Ship;","import Ship from \"../factory_functions/ship\"\n// Should keep track of missed attacks so they can display them\n// Should report whether or not all of the ships have been sunk\n\n// Maybe game board creates ships and set's it location, stores it in GameBoard as an object.\n// e.g. {type: Carrier, coordinates: [\"A1\",\"A2\"]}\n// When a person clicks a coordinate,\n\n// Maybe create each Ship object and put it in an Array for chedckAllSunk?\n\nconst GameBoard = (ship) => {\n    let missedShots = [];\n    let shipsObjs = [];\n\n    // Check todo list project, how you made a list of objects.\n    const placeShips = (name, location, length) => {\n        const newShip = Ship(name, location, length);\n        shipsObjs.push(newShip);\n        return shipsObjs;\n    };\n\n    const showShips = () => shipsObjs;\n    const showHits = () => {\n        let store = shipsObjs.map((obj) => obj.getHits());\n\n        return store;\n    };\n\n    // determines whether or not not the attack hit and sends\n    // the \"hit\" function to the correct ship.\n    // Or it records the coordinates of the missed shot.\n\n    /////////\n    // Need to fix this loop, it's not stopping/breaking when it finds coordinate which match\n    // which should return true for all and should return not true if it's not in.\n    ////////\n    const receiveAttack = (coordinates) => {\n        let check = false;\n\n        for (let i = 0; i < shipsObjs.length; i++) {\n            if (shipsObjs[i].getPlaceLoc().includes(coordinates)) {\n                shipsObjs[i].hit(coordinates);\n                check = true;\n                break;\n            } else {\n                missedShots.push(coordinates);\n            }\n        }\n\n        return check;\n    };\n\n    const checkAllSunk = () => {\n        let sunkArray = [];\n        shipsObjs.map((obj) => {\n            sunkArray.push(obj.isSunk());\n        });\n        return sunkArray.every((arr) => arr === true);\n    };\n\n    return {\n        placeShips,\n        receiveAttack,\n        checkAllSunk,\n        showShips,\n        showHits,\n    };\n};\n\n\nexport default GameBoard;","import createValidMoves from \"../factory_functions/createValidMoves\";\n\nconst Player = () => {\n    let newValidMoves = createValidMoves(\"A\", \"J\");\n    const playerMove = () => {\n        const assignedBoard = 0;\n    };\n\n    const computerMove = () => {\n        const assignedBoard = 1;\n        const randomPick =\n            newValidMoves[Math.floor(Math.random() * newValidMoves.length)];\n        newValidMoves = newValidMoves.filter((item) => item !== randomPick);\n\n        return randomPick;\n    };\n\n    return {\n        playerMove,\n        computerMove,\n    };\n};\n\nexport default Player;","import React, { useState, useEffect } from \"react\";\nimport \"./styles/App.css\";\nimport DisplayBoard from \"./components/DisplayBoard.js\";\nimport createValidMoves from \"../src/factory_functions/createValidMoves\";\nimport Ship from \"../src/factory_functions/ship\";\nimport GameBoard from \"../src/factory_functions/gameboard\";\nimport Player from \"../src/factory_functions/player\";\n\nconst App = () => {\n\n  const [isRestart, setIsRestart] = useState(false);\n  const [winner, setWinner] = useState(\"\");\n\n  const setUpBoard = (gameBoardP, gameBoardC) => {\n    gameBoardP.placeShips(\"Carrier\", [\"A1\", \"A2\", \"A3\", \"A4\", \"A5\"], 5);\n    gameBoardP.placeShips(\"Battleship\", [\"C1\", \"C2\", \"C3\", \"C4\"], 4);\n    gameBoardP.placeShips(\"Cruiser\", [\"E1\", \"E2\", \"E3\"], 3);\n    gameBoardP.placeShips(\"Submarine\", [\"G1\", \"G2\", \"G3\"], 3);\n    gameBoardP.placeShips(\"Destroyer\", [\"I1\", \"I2\"], 2);\n    // Comp Board Set up\n    gameBoardC.placeShips(\"Carrier\", [\"J1\", \"J2\", \"J3\", \"J4\", \"J5\"], 5);\n    gameBoardC.placeShips(\"Battleship\", [\"H1\", \"H2\", \"H3\", \"H4\"], 4);\n    gameBoardC.placeShips(\"Cruiser\", [\"F1\", \"F2\", \"F3\"], 3);\n    gameBoardC.placeShips(\"Submarine\", [\"D1\", \"D2\", \"D3\"], 3);\n    gameBoardC.placeShips(\"Destroyer\", [\"B1\", \"B2\"], 2);\n  };\n\n  const restartBoard = (gameBoardP, gameBoardC) => {\n    const playerBoard = document.getElementById(\"player-board\");\n    const winnerMsg = document.getElementById(\"winner-msg\");\n\n    playerBoard.className = \"add-pointer\";\n    winnerMsg.textContent = \"\";\n\n    gameBoardP = GameBoard();\n    gameBoardC = GameBoard();\n\n    setIsRestart(true);\n    resetColours()\n  };\n\n  const resetColours = () => {\n    const validMoves = createValidMoves(\"A\", \"J\");\n    const compBoardEle = [ ...document.getElementById(\"computer-board-squares\").childNodes];\n    let playerBoardEle = [ ...document.getElementById(\"player-board-squares\").childNodes];\n    \n    // Reset Player Board\n    playerBoardEle.map((item) => {\n      item.className=\"square square-bg\"\n      item.textContent = \"\"\n    });\n\n    // Reset Computer Board\n    compBoardEle.map((item, idx) => {\n      for (let j = 0; j < gameBoardC.showShips().length; j++) {\n        if (gameBoardC.showShips()[j].getPlaceLoc().includes(validMoves[idx])) {\n            item.className = \"square comp-show-ship-bg\";\n            break;\n        } else {\n            item.className = \"square square-bg\";\n        }\n      };\n      item.textContent = \"\";\n    })\n\n    // reset comp\n  };\n\n  const markCoord = (e) => {\n    if (e.target.className === \"square square-bg\") {\n      let isHitP = gameBoardP.receiveAttack(e.target.id);\n\n      // Registers the hit and changes styles\n      if (isHitP) {\n        e.target.className = \"square square-bg2\"\n        e.target.textContent = \"X\";\n      } else {\n        e.target.className = \"square no-pointer\"\n      };\n    };\n\n    computerMove();\n    checkWinner();\n  };\n\n  const computerMove = () => {\n    const compMove = newPlayers.computerMove();\n    const eleComp = document.querySelector(`#${compMove}`);\n    eleComp.textContent = \"X\";\n\n    if (gameBoardC.receiveAttack(compMove) === true) {\n      eleComp.className = \"square square-bg2\"\n    };\n  };\n\n  const checkWinner = () => {\n    const playerBoard = document.getElementById(\"player-board\");\n    if (gameBoardP.checkAllSunk() === true) {\n      playerBoard.className = \"no-pointer\";\n      setWinner(\"Player wins!\");\n\n    } else if (gameBoardC.checkAllSunk() === true) {\n      playerBoard.className = \"no-pointer\";\n      setWinner(\"Computer wins!\");\n    }\n  };\n\n  ///////////////////////////////////////\n\n  // Set up the Board //\n  const gameBoardP = GameBoard();\n  const gameBoardC = GameBoard();\n  setUpBoard(gameBoardP, gameBoardC);\n\n  // Set up Player //\n  const newPlayers = Player();\n\n  // Testing hits // \n  let tt = gameBoardP.showHits();\n  console.log(tt[0]);\n\n  //////////////////////////////////////\n\n  // Deals with setting up the game //\n    return (\n      <div >\n            <DisplayBoard \n              markCoord = {markCoord}\n              compShips = {gameBoardC.showShips()}\n            />\n            <p id=\"winner-msg\"> {winner} </p>\n            <button onClick={restartBoard}>Restart Game?</button>\n      </div>\n\n\n    )\n};\n\n\n\nexport default App;\n\n// How to reset CSS, using hooks, remaking the componenets?","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}